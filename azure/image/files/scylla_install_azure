#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright 2020 ScyllaDB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import glob
import re
import shutil
import shlex
import tarfile
import argparse
import subprocess
import platform
from pathlib import Path
try:
    from cStringIO import StringIO
except ImportError:
    from io import StringIO

my_env = os.environ.copy()
my_env['DEBIAN_FRONTEND']='noninteractive'
def run(cmd, shell=False):
    if not shell:
        cmd = shlex.split(cmd)
    return subprocess.check_call(cmd, shell=shell, env=my_env)

def verify_root_permissions():
    if os.getuid() != 0:
        print('Requires root permission.')
        sys.exit(1)

def parse_cli_args():
    parser = argparse.ArgumentParser(description='Construct AZURE')
    parser.add_argument('--localdeb', action='store_true', default=False,
                        help='deploy locally built debs')
    parser.add_argument('--product',
                        help='name of the product', default='scylla')
    parser.add_argument('--repo',
                        help='repository for both install and update, specify .list file URL')
    parser.add_argument('--repo-for-install',
                        help='repository for install, specify .list file URL')
    parser.add_argument('--repo-for-update',
                        help='repository for update, specify .list file URL')
    return parser.parse_args()

if __name__ == '__main__':
    verify_root_permissions()
    homedir = os.path.abspath(os.path.join(__file__, os.pardir))
    args = parse_cli_args()
    if args.repo:
        args.repo_for_install = args.repo_for_update = args.repo

    if not args.localdeb and not args.repo_for_install:
        print('Error: need to specify --localdeb or --repo/--repo-for-install')
        sys.exit(1)

    run('apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5e08fbd8b5d6ec9c')
    if args.repo_for_install:
        run('curl -L -o /etc/apt/sources.list.d/scylla_install.list {REPO_FOR_INSTALL}'.format(REPO_FOR_INSTALL=args.repo_for_install))
    elif args.localdeb:
        with open('/etc/apt/sources.list.d/scylla_install.list', 'w') as f:
            f.write('deb file:{} ./'.format(homedir))
    else:
        print('no scylla package found.')
        sys.exit(1)

    run('apt-get update --allow-insecure-repositories -y')
    run('apt-get upgrade -y')
    run('apt-get install -y --auto-remove --allow-unauthenticated {0}-machine-image {0}-server-dbg systemd-coredump'.format(args.product))

    run('systemctl daemon-reload')
    run('systemctl enable scylla-image-setup.service')
    run('/opt/scylladb/scripts/scylla_setup --no-coredump-setup --no-sysconfig-setup --no-raid-setup --no-io-setup --no-bootparam-setup --no-ec2-check --no-swap-setup')
    run('/opt/scylladb/scripts/scylla_sysconfig_setup --ami --disable-writeback-cache')
    os.remove('{}/.ssh/authorized_keys'.format(homedir))
    os.remove('/var/lib/scylla-housekeeping/housekeeping.uuid')

    with open('/etc/default/grub') as f:
        grub = f.read()
    grub = re.sub(r'^GRUB_CMDLINE_LINUX="(.+)"$', r'GRUB_CMDLINE_LINUX="\1 net.ifnames=0"', grub, flags=re.MULTILINE)
    with open('/etc/default/grub', 'w') as f:
        f.write(grub)
    run('grub-mkconfig -o /boot/grub/grub.cfg')

    with open('/etc/cloud/cloud.cfg') as f:
        lines = f.readlines()
    s = StringIO()
    for l in lines:
        if not re.match(r'^ - mounts\n$', l):
            s.write(l)
    cfg = s.getvalue()
    s.close()
    cfg = re.sub('^preserve_hostname: false', 'preserve_hostname: false\n\nssh_deletekeys: true', cfg, flags=re.MULTILINE)
    cfg = re.sub('^     name: ubuntu', '     name: scyllaadm', cfg, flags=re.MULTILINE)
    with open('/etc/cloud/cloud.cfg', 'w') as f:
        f.write(cfg)
    run('cloud-init clean')
    run('cloud-init init')
    run('ln -sf /home/scyllaadm {}'.format(homedir))
    for skel in glob.glob('/etc/skel/.*'):
        shutil.copy(skel, '/home/scyllaadm')
        os.chown(skel, 1001, 1001)
    profile = '/home/scyllaadm/.profile'
    with open(profile, 'a') as f:
        f.write('\n\n/opt/scylladb/scylla-machine-image/scylla_login\n')
    with open('/etc/hosts', 'a') as f:
        f.write('\n\n169.254.169.254    metadata.azure.internal\n')

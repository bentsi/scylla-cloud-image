#!/usr/bin/env python3
#
# Copyright 2020 ScyllaDB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import os
import sys
from pathlib import Path
from subprocess import run


sys.path.append('/opt/scylladb/scripts')
from scylla_util import is_ec2, is_gce, get_cloud_instance


def create_raid(devices):
    scylla_path = Path("/var/lib/scylla")
    print(f"Devices: {devices}")
    if scylla_path.is_mount():
        print(f"{scylla_path} is already mounted. Will not run 'scylla_raid_setup'!")
        sys.exit(0)
    run(["/opt/scylladb/scripts/scylla_raid_setup", "--raiddev", "/dev/md0", "--disks", ",".join(devices),
         "--root", "/var/lib/scylla", "--volume-role", "all", "--update-fstab"], check=True)


def get_disk_devices(instance, device_type):
    if is_ec2():
        if device_type == "attached":
            return [os.path.join('/dev/', name) for name in instance.ebs_disks()]
        elif device_type == "instance_store":
            return [os.path.join('/dev/', name) for name in instance.ephemeral_disks()]
        else:
            raise Exception(f"Unknown devicetype {device_type}")
    elif is_gce():
        return get_default_devices(instance)
    else:
        raise Exception("Running in unknown cloud environment")


def get_default_devices(instance):
    if is_ec2():
        return [os.path.join('/dev/', name) for name in instance.ephemeral_disks()]
    elif is_gce():
        return instance.getEphemeralOsDisks()
    else:
        raise Exception("Running in unknown cloud environment")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Disk creation script for Scylla.')
    parser.add_argument('--data-device', dest='data_device', action='store',
                        choices=["attached", "instance_store"],
                        help='Define type of device to use for scylla data: attached|instance_store')
    args = parser.parse_args()

    instance = get_cloud_instance()

    if not args.data_device:
        disk_devices = get_default_devices(instance)
    else:
        disk_devices = get_disk_devices(instance, args.data_device)

    create_raid(disk_devices)

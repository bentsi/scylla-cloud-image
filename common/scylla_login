#!/usr/bin/python3
#
# Copyright 2020 ScyllaDB
#
# SPDX-License-Identifier: Apache-2.0


import os
import sys
from lib.scylla_cloud import get_cloud_instance, colorprint, out
from subprocess import run

MSG_HEADER = '''

   _____            _ _       _____  ____  
  / ____|          | | |     |  __ \|  _ \ 
 | (___   ___ _   _| | | __ _| |  | | |_) |
  \___ \ / __| | | | | |/ _` | |  | |  _ < 
  ____) | (__| |_| | | | (_| | |__| | |_) |
 |_____/ \___|\__, |_|_|\__,_|_____/|____/ 
               __/ |                       
              |___/                        

Version:
        {scylla_version}
Nodetool:
        nodetool help
CQL Shell:
        cqlsh
More documentation available at: 
        https://docs.scylladb.com/
By default, Scylla sends certain information about this node to a data collection server. For more details, see https://www.scylladb.com/privacy/

'''[1:-1]
MSG_UNSUPPORTED_INSTANCE_TYPE = '''
    {red}{type} is not eligible for optimized automatic tuning!{nocolor}

To continue the setup of Scylla on this instance, run 'sudo scylla_io_setup' 
then 'sudo systemctl start scylla-server'.
For a list of optimized instance types and more instructions, see %s

'''[1:-1]
MSG_UNSUPPORTED_INSTANCE_TYPE_NO_DISKS = '''
    {red}{type} is not eligible for optimized automatic tuning!{nocolor}

To continue the setup of Scylla on this instance, you need to attach additional disks, 
next run 'sudo scylla_create_devices', 'sudo scylla_io_setup' 
then 'sudo systemctl start scylla-server'.
For a list of optimized instance types and more instructions, see %s
'''[1:-1]
MSG_DEV_INSTANCE_TYPE = '''
    {yellow}WARNING: {type} is intended for development purposes only and should not be used in production environments!
    This ScyllaDB instance is running in developer-mode.{nocolor}

For a list of supported instance types and more instructions, please refer to %s
'''[1:-1]
MSG_SETUP_ACTIVATING = '''
    {green}Constructing RAID volume...{nocolor}

Please wait for the setup to finish. To see its status, run 
 'systemctl status scylla-image-setup'

After the setup has finished, scylla-server service will launch.
To see the status of scylla-server, run 
 'systemctl status scylla-server'

'''[1:-1]
MSG_SETUP_FAILED = '''
    {red}Initial image configuration has failed!{nocolor}

To see the status of setup service, run 
 'systemctl status scylla-image-setup'

'''[1:-1]
MSG_SCYLLA_ACTIVATING = '''
    {green}Scylla is starting...{nocolor}

Please wait for Scylla startup to finish. To see its status, run 
 'systemctl status scylla-server'

'''[1:-1]
MSG_SCYLLA_FAILED = '''
    {red}Scylla has not started!{nocolor}

To see the status of Scylla, run 
 'systemctl status scylla-server'

'''[1:-1]
MSG_SCYLLA_MOUNT_FAILED = '''
    {red}Failed mounting RAID volume!{nocolor}

Scylla has aborted startup because of a missing RAID volume.
To see the status of Scylla, run
 'systemctl status scylla-server'

'''[1:-1]
MSG_SCYLLA_UNKNOWN = '''
    {red}Scylla has not started!{nocolor}

To see the status of Scylla, run
 'systemctl status scylla-server'

'''[1:-1]
MSG_SCYLLA_ACTIVE = '''
    {green}Scylla is active.{nocolor}

$ nodetool status

'''[1:-1]

if __name__ == '__main__':
    colorprint(MSG_HEADER.format(scylla_version=out("scylla --version")))
    cloud_instance = get_cloud_instance()
    if cloud_instance.is_dev_instance_type():
        colorprint(MSG_DEV_INSTANCE_TYPE % cloud_instance.getting_started_url, type=cloud_instance.instancetype)
    elif not cloud_instance.is_supported_instance_class():
        non_root_disks = cloud_instance.get_local_disks() + cloud_instance.get_remote_disks()
        if len(non_root_disks) == 0:
            colorprint(MSG_UNSUPPORTED_INSTANCE_TYPE_NO_DISKS % cloud_instance.getting_started_url,
                type=cloud_instance.instance_class())
        else:
            colorprint(MSG_UNSUPPORTED_INSTANCE_TYPE % cloud_instance.getting_started_url,
                type=cloud_instance.instance_class())
    else:
        skip_scylla_server = False
        if not os.path.exists('/etc/scylla/machine_image_configured'):
            res = out('systemctl is-active scylla-image-setup.service', ignore_error=True)
            if res == 'activating':
                colorprint(MSG_SETUP_ACTIVATING)
                skip_scylla_server = True
            elif res == 'failed':
                colorprint(MSG_SETUP_FAILED)
                skip_scylla_server = True
        if not skip_scylla_server:
            res = out('systemctl is-active scylla-server.service', ignore_error=True)
            if res == 'activating':
                colorprint(MSG_SCYLLA_ACTIVATING)
            elif res == 'failed':
                colorprint(MSG_SCYLLA_FAILED)
            elif res == 'inactive':
                if os.path.exists('/etc/systemd/system/scylla-server.service.d/mounts.conf'):
                    colorprint(MSG_SCYLLA_MOUNT_FAILED)
                else:
                    colorprint(MSG_SCYLLA_UNKNOWN)
            else:
                colorprint(MSG_SCYLLA_ACTIVE)
                run('nodetool status', shell=True)
        cloud_instance.check()
        print('\n', end='')

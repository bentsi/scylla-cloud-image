#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
# Copyright 2020 ScyllaDB
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import glob
import argparse
import subprocess
import re
from pathlib import Path


my_env = os.environ.copy()
my_env['DEBIAN_FRONTEND']='noninteractive'
def run(cmd, shell=True):
    subprocess.run(cmd, shell=shell, check=True, env=my_env)

def is_centos():
    return os.path.exists('/etc/redhat-release')

def verify_root_permissions():
    if os.getuid() != 0:
        print('Requires root permission.')
        sys.exit(1)


def parse_cli_args():
    parser = argparse.ArgumentParser(description='Construct AMI')
    parser.add_argument('--localrpm', action='store_true', default=False,
                        help='deploy locally built rpms')
    parser.add_argument('--product',
                        help='name of the product', default='scylla')
    parser.add_argument('--repo',
                        help='repository for both install and update, specify .repo file URL')
    parser.add_argument('--repo-for-install',
                        help='repository for install, specify .repo file URL')
    parser.add_argument('--repo-for-update',
                        help='repository for update, specify .repo file URL')
    return parser.parse_args()


if __name__ == '__main__':
    verify_root_permissions()
    distro = 'centos' if is_centos() else 'ubuntu'
    homedir = os.path.abspath(os.path.join(__file__, os.pardir))
    args = parse_cli_args()
    if args.repo:
        args.repo_for_install = args.repo_for_update = args.repo

    if not args.localrpm and not args.repo_for_install:
        print('Error: need to specify --localrpm or --repo/--repo-for-install')
        sys.exit(1)

    if distro == 'centos':
        run('yum update -y')
        run('yum install -y epel-release')

        if args.repo_for_install:
            run(f'curl -L -o /etc/yum.repos.d/scylla_install.repo {args.repo_for_install}')

        if args.localrpm:
            rpms = glob.glob('{}/scylla*.*.rpm'.format(homedir))
            run('yum install -y {}'.format(' '.join(rpms)))
        else:
            run('yum install -y {0}-python3 {0} {0}-machine-image {0}-debuginfo'.format(args.product))

        if args.repo_for_install:
            os.remove('/etc/yum.repos.d/scylla_install.repo')
        if args.repo_for_update:
            run(f'curl -L -o /etc/yum.repos.d/scylla.repo {args.repo_for_update}')
    else:
        run('apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 5e08fbd8b5d6ec9c')
        if args.repo_for_install:
            run('curl -L -o /etc/apt/sources.list.d/scylla_install.list {REPO_FOR_INSTALL}'.format(REPO_FOR_INSTALL=args.repo_for_install))
        elif args.localrpm:
            with open('/etc/apt/sources.list.d/scylla_install.list', 'w') as f:
                f.write('deb file:{} ./'.format(homedir))
        else:
            print('no scylla package found.')
            sys.exit(1)

        run('apt-get update --allow-insecure-repositories -y')
        run('apt-get upgrade -y')
        run('apt-get install -y --auto-remove --allow-unauthenticated {0}-machine-image {0}-server-dbg systemd-coredump'.format(args.product))

        os.remove('/etc/apt/sources.list.d/scylla_install.list')
        if args.repo_for_update:
            run('curl -L -o /etc/apt/sources.list.d/scylla.list {REPO_FOR_UPDATE}'.format(REPO_FOR_UPDATE=args.repo_for_update))

        # disable unattended-upgrades
        run('apt-get purge -y unattended-upgrades update-notifier-common')

    run("echo '/opt/scylladb/scylla-machine-image/scylla_login' >> /etc/skel/.bash_profile")
    run('systemctl daemon-reload')
    run('systemctl enable scylla-image-setup.service')
    run('/opt/scylladb/scripts/scylla_setup --no-coredump-setup --no-sysconfig-setup --no-raid-setup --no-io-setup --no-bootparam-setup --no-ec2-check --no-swap-setup')
    run('/opt/scylladb/scripts/scylla_sysconfig_setup --ami --disable-writeback-cache')
    housekeeping_uuid_path = Path('/var/lib/scylla-housekeeping/housekeeping.uuid')
    if housekeeping_uuid_path.exists():
        housekeeping_uuid_path.unlink()

    with open('/etc/default/grub') as f:
        grub = f.read()
    grub = re.sub(r'^GRUB_CMDLINE_LINUX="(.*)"$', r'GRUB_CMDLINE_LINUX="\1 net.ifnames=0"', grub, flags=re.MULTILINE)
    with open('/etc/default/grub', 'w') as f:
        f.write(grub)
    if distro == 'centos':
        run('grub2-mkconfig -o /boot/grub2/grub.cfg')
    else:
        run('grub-mkconfig -o /boot/grub/grub.cfg')

    if distro == 'centos':
        # install latest kernel-ml
        run('rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org')
        run('yum install -y https://www.elrepo.org/elrepo-release-8.el8.elrepo.noarch.rpm')
        run('yum -y --enablerepo=elrepo-kernel install kernel-ml kernel-ml-devel')
